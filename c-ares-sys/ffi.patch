--- src/ffi.rs.orig	2025-08-12 19:08:49.442277642 +0100
+++ src/ffi.rs	2025-08-12 19:10:04.918277631 +0100
@@ -1,11 +1,21 @@
 /* automatically generated by rust-bindgen 0.72.0 */
+#![allow(non_camel_case_types, non_snake_case)]
+use c_types::fd_set;
+use c_types::hostent;
+use c_types::in_addr;
+use c_types::iovec;
+use c_types::sockaddr;
+use c_types::socklen_t;
+use libc::timeval;
+
+#[cfg(target_os = "android")]
+use jni_sys;
+
+#[cfg(windows)]
+pub type ares_socket_t = ::std::os::windows::io::RawSocket;
+#[cfg(unix)]
+pub type ares_socket_t = ::std::os::unix::io::RawFd;
 
-pub type in_addr_t = u32;
-#[repr(C)]
-#[derive(Debug, Copy, Clone)]
-pub struct in_addr {
-    pub s_addr: in_addr_t,
-}
 pub type ares_socklen_t = socklen_t;
 pub type ares_ssize_t = isize;
 #[repr(u32)]
@@ -102,12 +112,19 @@
     pub sortlist: *mut apattern,
     pub nsort: ::std::os::raw::c_int,
     pub ednspsz: ::std::os::raw::c_int,
+    #[cfg(cares1_15)]
     pub resolvconf_path: *mut ::std::os::raw::c_char,
+    #[cfg(cares1_19)]
     pub hosts_path: *mut ::std::os::raw::c_char,
+    #[cfg(cares1_20)]
     pub udp_max_queries: ::std::os::raw::c_int,
+    #[cfg(cares1_22)]
     pub maxtimeout: ::std::os::raw::c_int,
+    #[cfg(cares1_23)]
     pub qcache_max_ttl: ::std::os::raw::c_uint,
+    #[cfg(cares1_26)]
     pub evsys: ares_evsys_t,
+    #[cfg(cares1_29)]
     pub server_failover_opts: ares_server_failover_options,
 }
 #[repr(C)]
@@ -1713,6 +1730,7 @@
 pub struct ares_addrinfo {
     pub cnames: *mut ares_addrinfo_cname,
     pub nodes: *mut ares_addrinfo_node,
+    #[cfg(cares1_18)]
     pub name: *mut ::std::os::raw::c_char,
 }
 #[repr(C)]
@@ -1923,3 +1941,17 @@
     #[doc = " Retrieve the total number of active queries pending answers from servers.\n  Some c-ares requests may spawn multiple queries, such as ares_getaddrinfo()\n  when using AF_UNSPEC, which will be reflected in this number.\n\n  \\param[in] channel Initialized ares channel\n  \\return Number of active queries to servers"]
     pub fn ares_queue_active_queries(channel: *const ares_channel_t) -> usize;
 }
+#[cfg(target_os = "android")]
+extern "C" {
+    pub fn ares_library_init_jvm(jvm: *mut jni_sys::JavaVM);
+}
+#[cfg(target_os = "android")]
+extern "C" {
+    pub fn ares_library_init_android(
+        connectivity_manager: jni_sys::jobject,
+    ) -> ::std::os::raw::c_int;
+}
+#[cfg(target_os = "android")]
+extern "C" {
+    pub fn ares_library_android_initialized() -> ::std::os::raw::c_int;
+}
